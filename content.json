{"meta":{"title":"KK's Notes","subtitle":null,"description":"Write and do better.","author":"KK.J","url":"http://jkknotes.com","root":"/"},"pages":[{"title":"about","date":"2019-04-04T07:43:55.000Z","updated":"2019-04-09T11:47:56.873Z","comments":true,"path":"about/index.html","permalink":"http://jkknotes.com/about/index.html","excerpt":"","text":"我々が岩壁の花を美しく思うのは我々が岩壁に足を止めてしまうからだ恐れ悚れ无き その花のように空へと踏み出せずにいるからだ我们之所以觉得悬崖上的花朵美丽那是因为我们会在悬崖停下脚步而不是像那些毫不畏惧的花朵般能向天空踏出一步—— BLEACH.12"},{"title":"categories","date":"2019-04-04T06:05:37.000Z","updated":"2019-04-04T07:37:09.070Z","comments":true,"path":"categories/index.html","permalink":"http://jkknotes.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-04T07:43:15.000Z","updated":"2019-04-04T07:46:36.344Z","comments":true,"path":"tags/index.html","permalink":"http://jkknotes.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello! life（一）","slug":"Hello-life（一）","date":"2019-04-09T07:06:45.000Z","updated":"2019-04-09T11:47:24.320Z","comments":true,"path":"Life/Hello-life/Hello-life（一）.html","link":"","permalink":"http://jkknotes.com/Life/Hello-life/Hello-life（一）.html","excerpt":"取这么个文艺的题名，怕是写不出什么文艺的话。毕竟，真的已经变成一个理工男和直男的典型。有时候还真是羡慕自己的小时候，也就是小学初中的时候，那时候自己还写过小说，写过诗集，读了一首诗，一篇文章，常常能有感而发。再看看现在的自己，嫌弃的不行，写这篇文章的时候，竟然还想列一二三四找论据，我想写的不是一篇随笔吗，文章结构，行文走句都很随便的那种。","text":"取这么个文艺的题名，怕是写不出什么文艺的话。毕竟，真的已经变成一个理工男和直男的典型。有时候还真是羡慕自己的小时候，也就是小学初中的时候，那时候自己还写过小说，写过诗集，读了一首诗，一篇文章，常常能有感而发。再看看现在的自己，嫌弃的不行，写这篇文章的时候，竟然还想列一二三四找论据，我想写的不是一篇随笔吗，文章结构，行文走句都很随便的那种。 本文同步发在我的CSDN Blog，欢迎各位看官大佬关注指教。 这几日闲的无聊，跑去图书馆找了个阳光充足的位置，就准备找几本闲书看看。在各个文学书架间徘徊，左翻翻右翻翻，最后敲定了几本书。翻开书，沐浴着阳光，那感觉确实不错，那种感觉还是刚上大一的时候感受过。这感觉只不过仅仅存在了几分钟罢了，竟然一篇文章也看不下去，那些散文，竟不知所云，对的，就是看不懂了，瞬间觉得自己上学这么多年，还是个粗人。 由此，不由得开始反思自己。 我开始回想自己的生活，总结着为什么。我想了下，原因至少有二： 其一，本科阶段懵懵懂懂，浪费了时间，而研究生阶段似乎懂事了，给自己压力很大，特别是实习那段时间，工作压力也不小，每天都挺累，回来躺床上只想刷微博，看Youtube，让各种碎片化的没有任何价值的新闻冲击着我的大脑，那种感觉却是会上瘾啊，而真正有营养的东西却无一席之地。久了，就习惯了快消文化占据了自己所有的碎片时间和业余生活。 我呢不过是社会发展大潮中一滴再普通不过的水滴。在这极其喧嚣和浮躁的世界里，举目四望，芸芸众生不是拿着手机就是举着手机，或是获取各种碎片化的信息，让各种情绪冲击着大脑，抑或是开着黑享受游戏的快感，间或是有几个认真的，拿着kindle，却时不时拿起手机瞟几眼。 也许是我们越来越宅了吧，圈子越来越小，好友难觅，也许是我们越来越空虚孤独，也许是压力太大或者过度放纵，也许是生活节奏太快了吧，也许是这些快消文化就是冲着我们的痛点设计的吧，让我们难以抵挡，就像是鸦片一样，让我们逐渐走向平凡，而对有营养的知识越来越难以接收。其实呢，快消文化也只是这个社会“快”的冰山一角，所有的事情都讲究快，急功近利。不说了，再说我的“愤青”怕是一发不可收拾。 其二，就吐槽吐槽学校吧，CUP真是一个极致理工的地方，极致理工男、直男癌的高产区。在这里我没有感受到自由艺术和人文思想的哪怕一点波澜。各种文艺晚会必不可少的是类似于“我为祖国献石油”式的节目。 哎，直男癌的吐槽就是这么直接。 CUP怕是中国高校中的一个极端吧，中国的传统文化向来是重文轻理的，但是中国的高等教育呢又走向重理轻文，很多理工类专业都没有设置文化通识类课程。我想这一定是不对的，这违反自然规律，因为自然规律讲究平衡。我不知道这是不是建国后没能产生大家伟人的原因之一，但是很多伟大的科学家都是博古通今的，写东西旁征博引，古诗词信手拈来，甚至能从中找出科研的灵感。再者，我觉得文化素养，人文情怀深厚的人更容易保持自我，坚持初心，不受外界影响。众所周知，高校早已经不是什么干净之地，衣冠叫兽层出不穷，出来的也只是冰山一角。扯远一点，是不是能扯上上面这个原因呢。 再随便写点。我了解的跟直男癌恋爱是很辛苦的，所以看看正面的榜样，各位看官可以学习一下。有一个学弟保研去了北大，女朋友也是北大才女，于是他收到这样的情书：","categories":[{"name":"Life","slug":"Life","permalink":"http://jkknotes.com/categories/Life/"},{"name":"Hello! life","slug":"Life/Hello-life","permalink":"http://jkknotes.com/categories/Life/Hello-life/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://jkknotes.com/tags/生活/"},{"name":"情感","slug":"情感","permalink":"http://jkknotes.com/tags/情感/"},{"name":"随笔","slug":"随笔","permalink":"http://jkknotes.com/tags/随笔/"}]},{"title":"kaggle实战——What Causes Heart Disease?","slug":"kaggle实战——What-Causes-Heart-Disease","date":"2019-04-07T12:29:29.000Z","updated":"2019-04-09T02:38:58.561Z","comments":true,"path":"Machine-Learning/项目实战/kaggle实战——What-Causes-Heart-Disease.html","link":"","permalink":"http://jkknotes.com/Machine-Learning/项目实战/kaggle实战——What-Causes-Heart-Disease.html","excerpt":"记得有一次去面试，那个公司的HR聊天说，她感觉程序员面试那是面真功夫，会就会，不会装也没用。从这里想开来，还真是，码农学再多理论，终究是要去码砖的。我呢就是原来机器学习和深度学习的理论学的多，实践反而少，所以感觉有时候做事情就慢了些。现在趁着还有些闲工夫，就找一些项目做做，由简单到复杂，慢慢来吧。","text":"记得有一次去面试，那个公司的HR聊天说，她感觉程序员面试那是面真功夫，会就会，不会装也没用。从这里想开来，还真是，码农学再多理论，终究是要去码砖的。我呢就是原来机器学习和深度学习的理论学的多，实践反而少，所以感觉有时候做事情就慢了些。现在趁着还有些闲工夫，就找一些项目做做，由简单到复杂，慢慢来吧。 本文同步发在我的CSDN Blog，接下来CSDN 和 KK’s Notes 同步更新，各位看官大佬多多指教。 Introduction这个项目来自于kaggle。项目主要是利用患者的个人信息和检查数据，利用机器学习方法来诊断该患者收否患疾病，并且尝试对识别结果作出解释。这个项目虽然简单但将机器学习的全流程和常用预处理和分析方法都涉及到了，我做完一遍还是有很多收获。以下操作皆在 Jubyter notebook 下以 Python 进行的。 主要使用的技术： Random Forest Feature Importance Analysis: Permutation importance Feature Importance Analysis: Partial Dependence Plots DataData from：https://www.kaggle.com/ronitf/heart-disease-uci/downloads/heart.csv/About Data：下载好数据之后直接打开看一看。 1234import pandas as pdimport numpy as npdata = pd.read_csv('data/heart.csv')data.info() Output:可以看到总共有303条数据以及13个特征和1个标签，数据没有缺失项。接下看下前十个数据。1data.head(10) Output:这13个特征的含义分别是： age: 年龄sex：该人的性别（1=男性，0=女性）cp：胸痛经历（值1：典型心绞痛，值2：非典型心绞痛，值3：非心绞痛，值4：无症状）trestbps：该人的静息血压（入院时为mm Hg）chol：人体胆固醇测量单位为mg/dlfbs：该人的空腹血糖（&gt; 120mg/dl，1=true; 0= f=alse）restecg：静息心电图测量（0=正常，1=有ST-T波异常，2=按Estes标准显示可能或明确的左心室肥厚）thalach：达到了该人的最大心率exang：运动诱发心绞痛（1=是; 0=否）oldpeak：运动相对于休息引起的ST段压低（’ST’与ECG图上的位置有关）slope：峰值运动ST段的斜率（值1：上升，值2：平坦，值3：下降）ca：主要血管数量（0-3）thal：称为地中海贫血的血液疾病（1=正常; 2=固定缺陷; 3=可逆缺陷）target：心脏病（0=不，1=是） 为了更好的理解数据，我们应该提前查一下每个特征的含义，以及医学上该特征和心脏病的关系。具体这里不再赘述。 数据预处理这里为了方便后续做心脏病诊断中影响因素分析即Feature Importance Analysis（还是觉得用英文更能表达意思），将部分数值型特征进行转换：12345678910111213141516171819202122232425data.loc[data.sex == 1, 'sex'] = 'male'data.loc[data['sex'] == 0, 'sex'] = 'female'data.loc[data['cp'] == 1, 'cp'] = 'typical'data.loc[data['cp'] == 2, 'cp'] = 'atypical'data.loc[data['cp'] == 3, 'cp'] = 'no_pain'data.loc[data['cp'] == 4, 'cp'] = 'no_feel'data.loc[data['fbs'] == 1, 'fbs'] = 'higher than 120 mg/dl'data.loc[data['fbs'] == 0, 'fbs'] = 'lower than 120 mg/dl'data.loc[data['restecg'] == 0, 'restecg'] = 'normal'data.loc[data['restecg'] == 1, 'restecg'] = 'ST-T wave abnormality'data.loc[data['restecg'] == 2, 'restecg'] = 'left ventricular hypertrophy'data.loc[data['exang'] == 1, 'exang'] = 'true'data.loc[data['exang'] == 0, 'exang'] = 'false'data.loc[data['slope'] == 1, 'slope'] = 'up'data.loc[data['slope'] == 2, 'slope'] = 'flat'data.loc[data['slope'] == 3, 'slope'] = 'down'data.loc[data['thal'] == 1, 'thal'] = 'normal'data.loc[data['thal'] == 2, 'thal'] = 'fixed defect'data.loc[data['thal'] == 3, 'thal'] = 'reversable defect' 检查下数据情况： 1data.describe(include=[np.object]) Output:可以看到特征thal有4个值，而我们在转换时只转换了3个。实际上thal存在2个缺失值用0补齐的。为了防止数据类型错误，这里做一下类型转换。 1data['thal'] = data['thal'].astype('object') 再看下数据：1data.head() Output:模型的训练肯定需要数值型特征。这里对特征进行Onehot编码。 12data = pd.get_dummies(data, drop_first=True)data.head() Output：（由于我还不知道在用markdown编辑时怎么显示运行结果，这里用的是截图，只能截取一部分，还有特征没有截取出来）数据预处理部分就到此为止，接下来上模型。 Random Forest对于 Random Forest 的原理这里就不介绍了，网上介绍的文章也很多。废话不多说，直接import package. 1234from sklearn.model_selection import train_test_splitfrom sklearn.ensemble import RandomForestClassifierimport matplotlib.pyplot as plt 将数据分成 train_data 和 test_data 2个集合，二者比例为8:2。 1234train_x, test_x, train_y, test_y = train_test_split(data.drop(columns='target'), data['target'], test_size=0.2, random_state=10) 简单的画个图调个参。这里 Random Forest 主要的参数有基学习器决策树的最大深度（这里依据经验选5）、基学习器个数 n_estimators。这里基学习器选用CART。 12345678910train_score = []test_score = []for n in range(1, 100): model = RandomForestClassifier(max_depth=5, n_estimators=n， criterion='gini') model.fit(train_x, train_y) train_score.append(model.score(train_x, train_y)) test_score.append(model.score(test_x, test_y)) 训练完，把train和test上的accuracy随基学习器个数的变化画成图。 1234567891011x_axis = [i for i in range(1, 100)]fig, ax = plt.subplots()ax.plot(x_axis, train_score[:99])ax.plot(x_axis, test_score[:99], c=\"r\")plt.xlim([0, 100])plt.ylim([0.0, 1.0])plt.rcParams['font.size'] = 12plt.xlabel('n_estimators')plt.ylabel('accuracy')plt.grid(True) Output：可以看到大概是n_estimators=14的时候效果最好，train和test上的accuracy分别是0.9463，0.8361。看上去没有那么差。 模型评估训练完模型，用ROC曲线来评估下模型的效果。ROC曲线事宜FPR和TPR分别为横纵轴作出的曲线，其和坐标轴围成的面积越大，说明模型效果越好。具体评判标准见下文。说一下几个概念： TPR: 真正例率，表示所有真正为正例的样本被正确预测出来的比例，等同于Recall FNR: 假负例率，FNR = 1 - TPR FPR: 假正例率，表示所有负例中被预测为正例的比例。 TNR: 真负例率，TNR = 1 - FPR 好吧，我也快晕了。接下来计算一下正例和负例的recall 123456from sklearn.metrics import confusion_matrixfrom sklearn.metrics import auc, roc_curve# 混淆矩阵confusion_m = confusion_matrix(test_y, pred_y) print confusion_m Output: 12[[29 6] [ 4 22]] 1234total = confusion_m.sum()tpr = float(confusion_m[0][0]) / (confusion_m[0][0] + confusion_m[1][0])tnr = float(confusion_m[1][1]) / (confusion_m[1][1] + confusion_m[0][1])print tpr, tnr Output: 10.878787878788 0.785714285714 Just so so!! 画ROC曲线图： 123456789101112131415pred_y = model.predict(test_x) # 预测结果pred_prob_y = model.predict_proba(test_x)[:, 1] # 为正例的概率fpr_list, tpr_list, throsholds = roc_curve(test_y, pred_prob_y)# 画图fig, ax = plt.subplots()ax.plot(fpr_list, tpr_list)ax.plot([0, 1], [0, 1], transform=ax.transAxes, ls=\"--\", c=\"r\")plt.xlim([0.0, 1.0])plt.ylim([0.0, 1.0])plt.rcParams['font.size'] = 12plt.title('roc curve')plt.xlabel('fpr')plt.ylabel('tpr')plt.grid(True) Output:前文说了，ROC曲线和坐标轴围成的面积越大，说明模型效果越好。这个面积就叫 AUC .根据AUC的值，可参考下面的规则评估模型： 0.90 - 1.00 = excellent 0.80 - 0.90 = good 0.70 - 0.80 = fair 0.60 - 0.70 = poor 0.50 - 0.60 = fail 看看我们训练模型的AUC 1auc(fpr_list, tpr_list) Output: 10.9032967032967033 OK， working well！ Feature Importance Analysis训练完模型，我们希望能从模型里得到点什么， 比如说哪些特征对模型结果贡献率比较大，是不是意味着这些影响因素在实际心脏病诊断中也是很重要对参考，或者说还能发现一些现有医学没有发现的发现。所有接下来我们做的是一件很有意思的事。 决策树可视化如果我没记错的话， 根据决策树的原理，越先分裂的特征越重要。那么下面对决策树进行可视化，看看它到底做了什么。 1234567891011from sklearn.tree import export_graphviz# 输出 feature_nameestimator = model.estimators_[1]features = [i for i in train_x.columns]# 0 —&gt; no disease，1 —&gt; diseasetrain_y_str = train_y.astype('str')train_y_str[train_y_str == '0'] = 'no disease'train_y_str[train_y_str == '1'] = 'disease'train_y_str = train_y_str.values sklearn 真是个好东西，你能想到对功能他都有。下面用 sklearn 的 export_graphviz 对决策树进行可视化。 123456export_graphviz(estimator, out_file='tree.dot', feature_names = features, class_names = train_y_str, rounded = True, proportion = True, label='root', precision = 2, filled = True) 生成对这个 tree.dot 文件还不能直接看，网上查了一下，把它输出来看看。 12345import pydotplusfrom IPython.display import Imageimg = pydotplus.graph_from_dot_file('tree.dot')#img.write_pdf('tree.pdf') #输出成PDFImage(img.create_png()) Output：实际上这张图就解释来决策树的生成过程。一般我们认为最先分裂的特征越重要，但是从这张图我们并不能很直观的看出特征的重要性。 Permutation importance我们换一个工具—Permutation importance. 其原理是依次打乱test_data中其中一个特征数值的顺序，其实就是做shuffle，然后观察模型的效果，下降的多的说明这个特征对模型比较重要。 12345import eli5from eli5.sklearn import PermutationImportanceperm = PermutationImportance(model, random_state=20).fit(test_x, test_y)eli5.show_weights(perm, feature_names=test_x.columns.tolist()) Output：一目了然，一切尽在不言中。还是说俩句吧，绿色越深表示正相关越强，红色越深表示负相关越强。实际上我发现改变 PermutationImportance 的参数 random_state 的值结果变化挺大的，不过还是有几个特征位次变化不大，结果还是具有参考意义。 Partial Dependence Plots我们试试另一个工具—Partial Dependence Plots. 其原理和 Permutation importance 有点类似，当它判断一个特征对模型的影响时，对于所有样本，将该特征依次取该特征的所有取值，观察模型结果的变化。先画图，再根据图解释一下。 12345678from pdpbox import pdp, info_plotstotal_features = train_x.columns.values.tolist()feature_name = 'oldpeak'pdp_dist = pdp.pdp_isolate(model=model, dataset=test_x, model_features=total_features, feature=feature_name)pdp.pdp_plot(pdp_dist, feature_name)plt.show() Output：上图的纵坐标是模型相对于base model 的变化，横坐标是该特征的所有取值，实线表示相对于base model 的变化的平均值，蓝色阴影表示置信度。oldpeak表示运动相对于休息引起的ST段压低，可以看到其取值越大，患心脏病的可能性越低。不知道这个结果可不可信，我觉得需要医学知识作支撑。 又试了几个特征： Sex：上图说明男性比女性患心脏病的概率要低些，网上查了一下，还真是这样。 Age：上图表示60岁以上老人心脏病高发，这个和现有理论相符。 接下来看一下 2D Partial Dependence Plots. 123456789inter = pdp.pdp_interact(model=model, dataset=test_x, model_features=total_features, features=['oldpeak', 'age'])pdp.pdp_interact_plot(pdp_interact_out=inter, feature_names=['oldpeak', 'age'], plot_type='contour')plt.show() Output：这个图一开始没看到，后来仔细看了Partial Dependence Plots 的说明文档才搞明白。图中颜色从浅到深表示患心脏病概率降低，以最深的那个紫色为例，oldpeak &gt; 3.0 &amp;&amp; 45 &lt; age &lt; 65 时，患病概率最低，图中黄色部分表示，oldpeak &lt; 0.25 &amp;&amp; ( age &lt; 45 || age &gt; 65 ) 时，患病概率最高。 后记实际上本项目的数据是非常小的，其结果的可靠性也是值得怀疑的。但是通过这个项目，去经历机器学习项目的完整过程，却能学到很多东西。重要的是过程，更重要的是举一反三。该项目还引入了2个很有趣的Feature Importance Analysis的方法，对于我来说是新知识，也算是学到了。 这一篇到这里结束了，期待下一篇。","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://jkknotes.com/categories/Machine-Learning/"},{"name":"项目实战","slug":"Machine-Learning/项目实战","permalink":"http://jkknotes.com/categories/Machine-Learning/项目实战/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://jkknotes.com/tags/Machine-Learning/"},{"name":"Random Forest","slug":"Random-Forest","permalink":"http://jkknotes.com/tags/Random-Forest/"},{"name":"AI医疗","slug":"AI医疗","permalink":"http://jkknotes.com/tags/AI医疗/"}]}]}